/*
 * MainPanel.java
 *
 * Created on Oct 20, 2010, 4:09:51 PM
 */

package proteogenomicmapping;

import codetable.CodeTable;
import genesplicerparser.GeneSplicerParser;
import java.io.File;
import java.io.FileNotFoundException;
import java.io.IOException;
import java.util.List;
import java.util.TreeMap;
import javax.swing.DefaultComboBoxModel;
import javax.swing.JFileChooser;
import javax.swing.JOptionPane;
import proteogenomicmapping.Mapper.MapperMode;

/**
 *
 * @author bm542
 */
public class MainPanel extends javax.swing.JPanel {

    /** Creates new form MainPanel */
    public MainPanel() {
        initComponents();
        this.jFileChooser1.setCurrentDirectory(new File("."));
        this.pnlEukaryoteSpliceSites.setVisible(false);
        this.tbCodons.setVisible(false);
        this.pnlGeneSplicer.setVisible(false);
    }

    private boolean getIsTabbedFile() {
        return (this.ddlSequenceType.getSelectedIndex() == 1);
    }

    /**
     * check if the eukaryote option is selected
     * @return
     */
    private boolean getIsEukaryote() {
        return (ddlGenerationMethod.getSelectedIndex() == 1);
    }

    /**
     * check if using the output of GeneSplicer.
     * if so, return the parsed values; otherwise, return null
     * @return
     */
    private GeneSplicerParser getGeneSplicerParser() throws FileNotFoundException, IOException {
        if(ddlGenerationMethod.getSelectedIndex() == 2) {
            return new GeneSplicerParser(this.tbGeneSplicerFilePath.getText());
        }
        return null;
    }

    /**
     * check if using a fixed distance.  if so, return
     * the distance; otherwise, return 0
     * @return the value from the codon
     */
    private int getCodons() {
        if(this.ddlGenerationMethod.getSelectedIndex() == 3) {
            return Integer.parseInt(tbCodons.getText());
        }
        return 0;
    }

    private String getOutputFilename() {
        int index = tbOutputFile.getText().lastIndexOf(".");
        // check if they just put in some random name without a dot. change: 01.25.14
        if (index == -1) {
            index = tbOutputFile.getText().length();
        }
        
        return tbOutputFile.getText().substring(0, index);
    }

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jFileChooser1 = new javax.swing.JFileChooser();
        buttonGroup1 = new javax.swing.ButtonGroup();
        jLabel1 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();
        jLabel5 = new javax.swing.JLabel();
        tbPeptideSequencesFile = new javax.swing.JTextField();
        btnPeptideSequencesBrowse = new javax.swing.JButton();
        tbGenomicSequencesFile = new javax.swing.JTextField();
        btnGenomicSequencesBrowse = new javax.swing.JButton();
        tbOutputFile = new javax.swing.JTextField();
        btnOutputFileBrowse = new javax.swing.JButton();
        jPanel2 = new javax.swing.JPanel();
        jLabel6 = new javax.swing.JLabel();
        btnCodeTablesFileBrowse = new javax.swing.JButton();
        tbCodeTablesFile = new javax.swing.JTextField();
        ddlCodeTables = new javax.swing.JComboBox();
        btnMap = new javax.swing.JButton();
        jPanel3 = new javax.swing.JPanel();
        jScrollPane1 = new javax.swing.JScrollPane();
        tbStatus = new javax.swing.JTextArea();
        jPanel4 = new javax.swing.JPanel();
        ddlGenerationMethod = new javax.swing.JComboBox();
        pnlEukaryoteSpliceSites = new javax.swing.JPanel();
        btnSpliceSiteStart = new javax.swing.JButton();
        tbSpliceSiteStart = new javax.swing.JTextField();
        btnSpliceSiteStop = new javax.swing.JButton();
        tbSpliceSiteStop = new javax.swing.JTextField();
        jLabel2 = new javax.swing.JLabel();
        jLabel7 = new javax.swing.JLabel();
        tbCodons = new javax.swing.JTextField();
        pnlGeneSplicer = new javax.swing.JPanel();
        jLabel8 = new javax.swing.JLabel();
        btnGeneSplicerBrowse = new javax.swing.JButton();
        tbGeneSplicerFilePath = new javax.swing.JTextField();
        ddlSequenceType = new javax.swing.JComboBox();

        jLabel1.setIcon(new javax.swing.ImageIcon(getClass().getResource("/resources/banner.jpg"))); // NOI18N

        jLabel3.setText("Peptide Sequences File");

        jLabel4.setText("Genomic Sequences File");

        jLabel5.setText("Output File");

        btnPeptideSequencesBrowse.setText("Browse");
        btnPeptideSequencesBrowse.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnPeptideSequencesBrowseActionPerformed(evt);
            }
        });

        btnGenomicSequencesBrowse.setText("Browse");
        btnGenomicSequencesBrowse.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnGenomicSequencesBrowseActionPerformed(evt);
            }
        });

        btnOutputFileBrowse.setText("Browse");
        btnOutputFileBrowse.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnOutputFileBrowseActionPerformed(evt);
            }
        });

        jPanel2.setBorder(javax.swing.BorderFactory.createTitledBorder("Code Tables"));

        jLabel6.setText("Code Tables File");

        btnCodeTablesFileBrowse.setText("Browse");
        btnCodeTablesFileBrowse.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnCodeTablesFileBrowseActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel6)
                .addGap(18, 18, 18)
                .addComponent(tbCodeTablesFile, javax.swing.GroupLayout.DEFAULT_SIZE, 272, Short.MAX_VALUE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(btnCodeTablesFileBrowse))
            .addComponent(ddlCodeTables, 0, 451, Short.MAX_VALUE)
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel6)
                    .addComponent(btnCodeTablesFileBrowse)
                    .addComponent(tbCodeTablesFile, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(ddlCodeTables, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
        );

        btnMap.setText("Map");
        btnMap.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnMapActionPerformed(evt);
            }
        });

        jPanel3.setBorder(javax.swing.BorderFactory.createTitledBorder("Status"));

        tbStatus.setColumns(20);
        tbStatus.setRows(5);
        jScrollPane1.setViewportView(tbStatus);

        javax.swing.GroupLayout jPanel3Layout = new javax.swing.GroupLayout(jPanel3);
        jPanel3.setLayout(jPanel3Layout);
        jPanel3Layout.setHorizontalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel3Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 431, Short.MAX_VALUE)
                .addContainerGap())
        );
        jPanel3Layout.setVerticalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel3Layout.createSequentialGroup()
                .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 154, Short.MAX_VALUE)
                .addContainerGap())
        );

        jPanel4.setBorder(javax.swing.BorderFactory.createTitledBorder("ePST Generation Method"));

        ddlGenerationMethod.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "Ignore Splice Sites (prokaryotes)", "Use Splice Sites (eukaryotes)", "Use Calculated Splice Sites (GeneSplicer output)", "Fixed Distance (codons)" }));
        ddlGenerationMethod.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                ddlGenerationMethodActionPerformed(evt);
            }
        });

        pnlEukaryoteSpliceSites.setBorder(javax.swing.BorderFactory.createEtchedBorder());

        btnSpliceSiteStart.setText("Browse");

        tbSpliceSiteStart.setText("Use Default");

        btnSpliceSiteStop.setText("Browse");

        tbSpliceSiteStop.setText("Use Default");

        jLabel2.setText("Splice Site Starts");

        jLabel7.setText("Splice Site Stops");

        javax.swing.GroupLayout pnlEukaryoteSpliceSitesLayout = new javax.swing.GroupLayout(pnlEukaryoteSpliceSites);
        pnlEukaryoteSpliceSites.setLayout(pnlEukaryoteSpliceSitesLayout);
        pnlEukaryoteSpliceSitesLayout.setHorizontalGroup(
            pnlEukaryoteSpliceSitesLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(pnlEukaryoteSpliceSitesLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(pnlEukaryoteSpliceSitesLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel2)
                    .addComponent(jLabel7))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(pnlEukaryoteSpliceSitesLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(tbSpliceSiteStop, javax.swing.GroupLayout.DEFAULT_SIZE, 270, Short.MAX_VALUE)
                    .addComponent(tbSpliceSiteStart, javax.swing.GroupLayout.DEFAULT_SIZE, 270, Short.MAX_VALUE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(pnlEukaryoteSpliceSitesLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(btnSpliceSiteStart, javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(btnSpliceSiteStop, javax.swing.GroupLayout.Alignment.TRAILING))
                .addContainerGap())
        );
        pnlEukaryoteSpliceSitesLayout.setVerticalGroup(
            pnlEukaryoteSpliceSitesLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(pnlEukaryoteSpliceSitesLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(pnlEukaryoteSpliceSitesLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(btnSpliceSiteStart)
                    .addComponent(tbSpliceSiteStart, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel2))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(pnlEukaryoteSpliceSitesLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(btnSpliceSiteStop)
                    .addComponent(tbSpliceSiteStop, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel7))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        tbCodons.setText("20");

        pnlGeneSplicer.setBorder(javax.swing.BorderFactory.createEtchedBorder());

        jLabel8.setText("GeneSplicer Output File");

        btnGeneSplicerBrowse.setText("Browse");
        btnGeneSplicerBrowse.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnGeneSplicerBrowseActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout pnlGeneSplicerLayout = new javax.swing.GroupLayout(pnlGeneSplicer);
        pnlGeneSplicer.setLayout(pnlGeneSplicerLayout);
        pnlGeneSplicerLayout.setHorizontalGroup(
            pnlGeneSplicerLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(pnlGeneSplicerLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel8)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(tbGeneSplicerFilePath, javax.swing.GroupLayout.DEFAULT_SIZE, 238, Short.MAX_VALUE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(btnGeneSplicerBrowse)
                .addContainerGap())
        );
        pnlGeneSplicerLayout.setVerticalGroup(
            pnlGeneSplicerLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(pnlGeneSplicerLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(pnlGeneSplicerLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel8)
                    .addComponent(btnGeneSplicerBrowse)
                    .addComponent(tbGeneSplicerFilePath, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        javax.swing.GroupLayout jPanel4Layout = new javax.swing.GroupLayout(jPanel4);
        jPanel4.setLayout(jPanel4Layout);
        jPanel4Layout.setHorizontalGroup(
            jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel4Layout.createSequentialGroup()
                .addComponent(ddlGenerationMethod, 0, 373, Short.MAX_VALUE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(tbCodons, javax.swing.GroupLayout.PREFERRED_SIZE, 72, javax.swing.GroupLayout.PREFERRED_SIZE))
            .addComponent(pnlEukaryoteSpliceSites, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addComponent(pnlGeneSplicer, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        jPanel4Layout.setVerticalGroup(
            jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel4Layout.createSequentialGroup()
                .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(ddlGenerationMethod, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(tbCodons, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(pnlEukaryoteSpliceSites, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(pnlGeneSplicer, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
        );

        ddlSequenceType.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "FASTA", "Tabbed" }));

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jPanel3, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jPanel4, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jLabel1, javax.swing.GroupLayout.DEFAULT_SIZE, 467, Short.MAX_VALUE)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addGroup(javax.swing.GroupLayout.Alignment.LEADING, layout.createSequentialGroup()
                                .addComponent(jLabel3)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(tbPeptideSequencesFile, javax.swing.GroupLayout.DEFAULT_SIZE, 201, Short.MAX_VALUE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(btnPeptideSequencesBrowse))
                            .addGroup(javax.swing.GroupLayout.Alignment.LEADING, layout.createSequentialGroup()
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(jLabel4)
                                    .addComponent(jLabel5))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(tbOutputFile, javax.swing.GroupLayout.DEFAULT_SIZE, 276, Short.MAX_VALUE)
                                    .addComponent(tbGenomicSequencesFile, javax.swing.GroupLayout.DEFAULT_SIZE, 276, Short.MAX_VALUE))))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                            .addComponent(btnGenomicSequencesBrowse, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(btnOutputFileBrowse, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(ddlSequenceType, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
                    .addComponent(jPanel2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(btnMap, javax.swing.GroupLayout.Alignment.TRAILING))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel1)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel3)
                    .addComponent(tbPeptideSequencesFile, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(ddlSequenceType, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(btnPeptideSequencesBrowse))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel4)
                    .addComponent(tbGenomicSequencesFile, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(btnGenomicSequencesBrowse))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel5)
                    .addComponent(tbOutputFile, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(btnOutputFileBrowse))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jPanel4, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jPanel2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(btnMap)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jPanel3, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addContainerGap())
        );
    }// </editor-fold>//GEN-END:initComponents

    private void btnMapActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnMapActionPerformed

        try {
            tbStatus.setText(tbStatus.getText() + "\n" + "Validating input...");

            String codeFile = tbCodeTablesFile.getText();
            String codeName = (String) this.ddlCodeTables.getSelectedItem();
            String peptideFilePath = tbPeptideSequencesFile.getText();
            String referenceFilePath = tbGenomicSequencesFile.getText();
            String outputFilename = tbOutputFile.getText();
            String outputFastaFilename = getOutputFilename() + ".fasta";
            String outputGff3Filename = getOutputFilename() + ".gff3";

            // make sure the fasta file is not named the same as one of the input files
            if(outputFastaFilename.equalsIgnoreCase(peptideFilePath)) {
                    outputFastaFilename = getOutputFilename() + ".out.fasta";
            }

            if(outputFastaFilename.equalsIgnoreCase(referenceFilePath)) {
                    outputFastaFilename = getOutputFilename() + ".out.fasta";
            }

            String beginSpliceSitesPath = this.tbSpliceSiteStart.getText();
            String endSpliceSitesPath = this.tbSpliceSiteStop.getText();
            boolean isEukaryote = getIsEukaryote();
            int codons = getCodons();
            GeneSplicerParser geneSplicerParser = getGeneSplicerParser();

            List<BioSequence> peptides;
            if (getIsTabbedFile()) {
                peptides = TabbedSequenceReader.readSequences(peptideFilePath);
            } else {
                peptides = FASTASequenceReader.readSequences(peptideFilePath);
            }

            MapperMode mode = Mapper.MapperMode.Prokaryote;
            if (isEukaryote) {
                mode = MapperMode.Eukaryote;
            } else if (codons > 0) {
                mode = MapperMode.Codon;
            } else if (geneSplicerParser != null) {
                mode = MapperMode.GeneSplicer;
            }

            tbStatus.setText(tbStatus.getText() + "\n" + "Constructing state machine...");
            StateMachine sm = new StateMachine(peptides);

            tbStatus.setText(tbStatus.getText() + "\n" + "Reading the codon file...");
            CodeTable table = CodeTable.getCodeTable(codeFile, codeName);

            Mapper m = new Mapper(peptides, sm,
                    referenceFilePath, outputFilename, outputFastaFilename, outputGff3Filename,
                    table, mode,
                    beginSpliceSitesPath, endSpliceSitesPath,
                    codons, geneSplicerParser);

            // perform the mapping
            tbStatus.setText(tbStatus.getText() + "\n" + "Searching reference sequences...");
            m.map();

            tbStatus.setText(tbStatus.getText() + "\n" + "Finished!");
        } catch (Exception ex) {
            tbStatus.setText(tbStatus.getText() + "\n" + "Error: " + ex.getMessage() + "\nQuitting.");
            JOptionPane.showMessageDialog(this,
                ex.getMessage(),
                "Proteogenomic Mapping Pipeline",
                JOptionPane.ERROR_MESSAGE);
        }
    }//GEN-LAST:event_btnMapActionPerformed

    private void btnPeptideSequencesBrowseActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnPeptideSequencesBrowseActionPerformed
        jFileChooser1.setFileSelectionMode(JFileChooser.FILES_ONLY);
	if(this.jFileChooser1.showOpenDialog(this) == JFileChooser.APPROVE_OPTION) {
	    try {
		String peptideSequenceFile = jFileChooser1.getSelectedFile().getCanonicalPath();
		this.tbPeptideSequencesFile.setText(peptideSequenceFile);
	    } catch (IOException ex) {
		javax.swing.JOptionPane.showMessageDialog(null, "Encounterd an exception while selecting the file:\n" + ex.getMessage());
		ex.printStackTrace();
	    }
	}
    }//GEN-LAST:event_btnPeptideSequencesBrowseActionPerformed

    private void btnGenomicSequencesBrowseActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnGenomicSequencesBrowseActionPerformed
        jFileChooser1.setFileSelectionMode(JFileChooser.FILES_ONLY);
	if(this.jFileChooser1.showOpenDialog(this) == JFileChooser.APPROVE_OPTION) {
	    try {
		String genomicSequenceFile = jFileChooser1.getSelectedFile().getCanonicalPath();
		this.tbGenomicSequencesFile.setText(genomicSequenceFile);
	    } catch (IOException ex) {
		javax.swing.JOptionPane.showMessageDialog(null, "Encounterd an exception while selecting the file:\n" + ex.getMessage());
		ex.printStackTrace();
	    }
	}
    }//GEN-LAST:event_btnGenomicSequencesBrowseActionPerformed

    private void btnOutputFileBrowseActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnOutputFileBrowseActionPerformed
        jFileChooser1.setFileSelectionMode(JFileChooser.FILES_ONLY);
	if(this.jFileChooser1.showSaveDialog(this) == JFileChooser.APPROVE_OPTION) {
	    try {
		String outputFile = jFileChooser1.getSelectedFile().getCanonicalPath();
		this.tbOutputFile.setText(outputFile);
	    } catch (IOException ex) {
		javax.swing.JOptionPane.showMessageDialog(null, "Encounterd an exception while selecting the file:\n" + ex.getMessage());
		ex.printStackTrace();
	    }
	}
    }//GEN-LAST:event_btnOutputFileBrowseActionPerformed

    private void btnCodeTablesFileBrowseActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnCodeTablesFileBrowseActionPerformed
        jFileChooser1.setFileSelectionMode(JFileChooser.FILES_ONLY);
	if(this.jFileChooser1.showOpenDialog(this) == JFileChooser.APPROVE_OPTION) {
	    try {
		String codeTablesFile = jFileChooser1.getSelectedFile().getCanonicalPath();
		this.tbCodeTablesFile.setText(codeTablesFile);

                // then parse out the tables and fill the combo box
                TreeMap<String, CodeTable> codeTables = CodeTable.getCodeTables(codeTablesFile);

                DefaultComboBoxModel model = (DefaultComboBoxModel)ddlCodeTables.getModel();
                model.removeAllElements();

                for(String tableName : codeTables.keySet()) {
                    model.addElement(tableName);
                }

                // attempt to use the standard mapping table
                if(model.getIndexOf("Standard") > -1) {
                    model.setSelectedItem("Standard");
                }
	    } catch (Exception ex) {
		javax.swing.JOptionPane.showMessageDialog(null, "Encounterd an exception while selecting the file:\n" + ex.getMessage());
		ex.printStackTrace();
	    }
	}
    }//GEN-LAST:event_btnCodeTablesFileBrowseActionPerformed

    private void ddlGenerationMethodActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_ddlGenerationMethodActionPerformed
        if(ddlGenerationMethod.getSelectedIndex() == 1) {
            this.pnlEukaryoteSpliceSites.setVisible(true);
            this.tbCodons.setVisible(false);
            this.pnlGeneSplicer.setVisible(false);
        } else if(ddlGenerationMethod.getSelectedIndex() == 2) {
            this.pnlEukaryoteSpliceSites.setVisible(false);
            this.tbCodons.setVisible(false);
            this.pnlGeneSplicer.setVisible(true);
        } else if(ddlGenerationMethod.getSelectedIndex() == 3) {
            this.pnlEukaryoteSpliceSites.setVisible(false);
            this.tbCodons.setVisible(true);
            this.pnlGeneSplicer.setVisible(false);
        } else {
            this.pnlEukaryoteSpliceSites.setVisible(false);
            this.tbCodons.setVisible(false);
            this.pnlGeneSplicer.setVisible(false);
        }
        this.pnlEukaryoteSpliceSites.revalidate();
        this.repaint();
    }//GEN-LAST:event_ddlGenerationMethodActionPerformed

    private void btnGeneSplicerBrowseActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnGeneSplicerBrowseActionPerformed
        jFileChooser1.setFileSelectionMode(JFileChooser.FILES_ONLY);
	if(this.jFileChooser1.showOpenDialog(this) == JFileChooser.APPROVE_OPTION) {
	    try {
		String geneSplicerFile = jFileChooser1.getSelectedFile().getCanonicalPath();
		this.tbGeneSplicerFilePath.setText(geneSplicerFile);
	    } catch (IOException ex) {
		javax.swing.JOptionPane.showMessageDialog(null, "Encounterd an exception while selecting the file:\n" + ex.getMessage());
		ex.printStackTrace();
	    }
	}
    }//GEN-LAST:event_btnGeneSplicerBrowseActionPerformed


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnCodeTablesFileBrowse;
    private javax.swing.JButton btnGeneSplicerBrowse;
    private javax.swing.JButton btnGenomicSequencesBrowse;
    private javax.swing.JButton btnMap;
    private javax.swing.JButton btnOutputFileBrowse;
    private javax.swing.JButton btnPeptideSequencesBrowse;
    private javax.swing.JButton btnSpliceSiteStart;
    private javax.swing.JButton btnSpliceSiteStop;
    private javax.swing.ButtonGroup buttonGroup1;
    private javax.swing.JComboBox ddlCodeTables;
    private javax.swing.JComboBox ddlGenerationMethod;
    private javax.swing.JComboBox ddlSequenceType;
    private javax.swing.JFileChooser jFileChooser1;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JPanel jPanel4;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JPanel pnlEukaryoteSpliceSites;
    private javax.swing.JPanel pnlGeneSplicer;
    private javax.swing.JTextField tbCodeTablesFile;
    private javax.swing.JTextField tbCodons;
    private javax.swing.JTextField tbGeneSplicerFilePath;
    private javax.swing.JTextField tbGenomicSequencesFile;
    private javax.swing.JTextField tbOutputFile;
    private javax.swing.JTextField tbPeptideSequencesFile;
    private javax.swing.JTextField tbSpliceSiteStart;
    private javax.swing.JTextField tbSpliceSiteStop;
    private javax.swing.JTextArea tbStatus;
    // End of variables declaration//GEN-END:variables

}
